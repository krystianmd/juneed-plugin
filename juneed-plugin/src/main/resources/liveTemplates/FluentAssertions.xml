<templateSet group="FluentAssertions">
    <template name="fase" value="org.assertj.core.api.Assertions.assertThat($ACTUAL$).isEqualTo($EXPECTED$);$END$"
              description="assertThat # is equal to" toReformat="true" toShortenFQNames="true" useStaticImport="true">
        <variable name="ACTUAL" expression="" defaultValue="" alwaysStopAt="true"/>
        <variable name="EXPECTED" expression="" defaultValue="" alwaysStopAt="true"/>
        <context>
            <option name="JAVA_TEST_STATEMENT" value="true"/>
        </context>
    </template>
    <template name="fasnn" value="org.assertj.core.api.Assertions.assertThat($ACTUAL$).isNotNull();$END$"
              description="assertThat # is not null" toReformat="true" toShortenFQNames="true" useStaticImport="true">
        <variable name="ACTUAL" expression="" defaultValue="" alwaysStopAt="true"/>
        <context>
            <option name="JAVA_TEST_STATEMENT" value="true"/>
        </context>
    </template>
    <template name="fast" value="org.assertj.core.api.Assertions.assertThat($ACTUAL$).isTrue();$END$"
              description="assertThat # is true" toReformat="true" toShortenFQNames="true" useStaticImport="true">
        <variable name="ACTUAL" expression="" defaultValue="" alwaysStopAt="true"/>
        <context>
            <option name="JAVA_TEST_STATEMENT" value="true"/>
        </context>
    </template>
    <template name="fasf" value="org.assertj.core.api.Assertions.assertThat($ACTUAL$).isFalse();$END$"
              description="assertThat # is false" toReformat="true" toShortenFQNames="true" useStaticImport="true">
        <variable name="ACTUAL" expression="" defaultValue="" alwaysStopAt="true"/>
        <context>
            <option name="JAVA_TEST_STATEMENT" value="true"/>
        </context>
    </template>
    <template name="fasn" value="org.assertj.core.api.Assertions.assertThat($ACTUAL$).isNull();$END$"
              description="assertThat # is null" toReformat="true" toShortenFQNames="true" useStaticImport="true">
        <variable name="ACTUAL" expression="" defaultValue="" alwaysStopAt="true"/>
        <context>
            <option name="JAVA_TEST_STATEMENT" value="true"/>
        </context>
    </template>
    <template name="fasth"
              value="org.assertj.core.api.Assertions.assertThatExceptionOfType($EXC$.class)&#10;    .isThrownBy(() -&gt; $EXEC$)&#10;    .withMessageContaining(&quot;$MSG$&quot;);$END$"
              description="assertThat exception of type is thrown by #" toReformat="true" toShortenFQNames="true"
              useStaticImport="true">
        <variable name="EXC" expression="" defaultValue="" alwaysStopAt="true"/>
        <variable name="EXEC" expression="" defaultValue="" alwaysStopAt="true"/>
        <variable name="MSG" expression="" defaultValue="" alwaysStopAt="true"/>
        <context>
            <option name="JAVA_TEST_STATEMENT" value="true"/>
        </context>
    </template>
    <template name="fasAny"
              value="org.assertj.core.api.Assertions.assertThat($ACTUAL$).anySatisfy($ELEMENT$ -&gt; {&#10;    $END$&#10;});"
              description="assertThat any satisfy" toReformat="true" toShortenFQNames="true" useStaticImport="true">
        <variable name="ACTUAL" expression="" defaultValue="" alwaysStopAt="true"/>
        <variable name="ELEMENT" expression="suggestVariableName()" defaultValue="" alwaysStopAt="true"/>
        <context>
            <option name="JAVA_TEST_STATEMENT" value="true"/>
        </context>
    </template>
    <template name="fasAll"
              value="org.assertj.core.api.Assertions.assertThat($ACTUAL$).allSatisfy($ELEMENT$ -&gt; {&#10;    $END$&#10;});"
              description="assertThat all satisfy" toReformat="true" toShortenFQNames="true" useStaticImport="true">
        <variable name="ACTUAL" expression="" defaultValue="" alwaysStopAt="true"/>
        <variable name="ELEMENT" expression="suggestVariableName()" defaultValue="" alwaysStopAt="true"/>
        <context>
            <option name="JAVA_TEST_STATEMENT" value="true"/>
        </context>
    </template>
</templateSet>